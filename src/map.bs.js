// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactSimpleMaps = require("react-simple-maps");
var Fetcher$MyProjectName = require("./Fetcher.bs.js");

function make(children) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.ComposableMap, /* () */0, children);
}

var ComposableMap = /* module */[/* make */make];

function make$1(children) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.ZoomableGroup, /* () */0, children);
}

var ZoomableGroup = /* module */[/* make */make$1];

function make$2(children) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.Markers, /* () */0, children);
}

var Markers = /* module */[/* make */make$2];

function make$3(onData, _) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.Geographies, {
              geography: "world-50m.json"
            }, Curry.__2(onData));
}

var Geographies = /* module */[/* make */make$3];

function make$4(coordinates, children) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.Marker, {
              marker: {
                coordinates: coordinates
              }
            }, children);
}

var Marker = /* module */[/* make */make$4];

function make$5(data, projection, children) {
  return ReasonReact.wrapJsForReason(ReactSimpleMaps.Geography, {
              geography: data,
              projection: projection
            }, children);
}

var Geography = /* module */[/* make */make$5];

var component = ReasonReact.reducerComponent("Map");

function make$6() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* LoadData */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var match = _self[/* state */1];
              var tmp;
              if (typeof match === "number") {
                tmp = null;
              } else {
                var children = /* array */[Belt_Array.map(Belt_Array.map(match[0], (function (data) {
                              var match = data.location;
                              return /* tuple */[
                                      /* array */[
                                        match[1],
                                        match[0]
                                      ],
                                      data.username
                                    ];
                            })), (function (param) {
                          return ReasonReact.element(/* None */0, /* None */0, make$4(param[0], /* array */[
                                          React.createElement("circle", {
                                                cx: "0",
                                                cy: "0",
                                                fill: "red",
                                                r: "3"
                                              }),
                                          React.createElement("text", {
                                                fill: "blue",
                                                x: "0",
                                                y: "0"
                                              }, param[1])
                                        ]));
                        }))];
                tmp = ReasonReact.element(/* None */0, /* None */0, ReasonReact.wrapJsForReason(ReactSimpleMaps.Markers, /* () */0, children));
              }
              var children$1 = /* array */[
                ReasonReact.element(/* None */0, /* None */0, make$3((function (geographies, projection) {
                            return Belt_Array.map(geographies, (function (geography) {
                                          return ReasonReact.element(/* Some */[geography.id], /* None */0, make$5(geography, projection, /* array */[]));
                                        }));
                          }), /* array */[])),
                tmp
              ];
              var children$2 = /* array */[ReasonReact.element(/* None */0, /* None */0, ReasonReact.wrapJsForReason(ReactSimpleMaps.ZoomableGroup, /* () */0, children$1))];
              return ReasonReact.element(/* None */0, /* None */0, ReasonReact.wrapJsForReason(ReactSimpleMaps.ComposableMap, /* () */0, children$2));
            }),
          /* initialState */(function () {
              return /* NoData */1;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (action) {
                console.log("DATA LOADED");
                return /* Update */Block.__(0, [/* Data */[action[0]]]);
              } else {
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* Loading */0,
                          (function (self) {
                              return Fetcher$MyProjectName.fetchGet("https://immense-river-25513.herokuapp.com/locations", (function (data) {
                                            return Curry._1(self[/* send */3], /* DataLoaded */[data]);
                                          }));
                            })
                        ]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.ComposableMap = ComposableMap;
exports.ZoomableGroup = ZoomableGroup;
exports.Markers = Markers;
exports.Geographies = Geographies;
exports.Marker = Marker;
exports.Geography = Geography;
exports.component = component;
exports.make = make$6;
/* component Not a pure module */
